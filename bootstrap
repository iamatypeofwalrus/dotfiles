#!/usr/bin/env sh
set -e

echo "bootstraping..."

dev_dir=~/code
mac_fonts_dir=~/Library/Fonts
git_fonts_dir=$dev_dir/fonts

MAC_OS_VERSION=$(sw_vers | grep ProductVersion | awk '{print $2}' | awk -F. '{print $2}')
MAC_OS_HIGH_SIERRA=13

# Get directory of this script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

mkdir -p $dev_dir
mkdir -p ~/bin

if [ -d ~/.oh-my-zsh ]
then
  echo "oh-my-zsh is already installed"
else
  echo "oh-my-zsh not installed. Installing..."
  sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi

if [ -x "$(command -v brew)" ]
then
  echo "brew is already installed"
else
  echo "brew is not installed. Installing..."

  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

if [ -x "$(command -v jq)" ]
then
  echo "jq is already installed"
else
  echo "jq is not installed. Installing..."
  brew install jq
fi

## Ruby
if [ -d ~/.rbenv ]
then
  echo "rbenv is already installed"
else
  echo "rbenv is not installed. Installing..."
  brew install rbenv
fi

## Python
if [ -d ~/.pyenv ]
then
  echo "pyenv is already installed"
else
  echo "pyenv is not installed. Installing..."
  brew install pyenv
fi

eval "$(pyenv init -)"
export PATH="~/.pyenv/bin:$PATH"
export PATH=$(python -m site --user-base)/bin:$PATH

if [ ! -z "$BOOTSTRAP_FORCE" ]
then
  # Needed the following brew and installer calls due to a build problem on Mojave
  # https://github.com/pyenv/pyenv/wiki/Common-build-problems
  brew install readline xz

  if [ "$MAC_OS_VERSION" -gt "$MAC_OS_HIGH_SIERRA" ]
  then
    sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
  fi
fi

PYTHON_TWO_LATEST=$(pyenv install --list | sed 's/^[[:space:]]*//' | grep "^[2]\.[0-9]\.[0-9]*$" | tail -n 1)
PYTHON_THREE_LATEST=$(pyenv install --list | sed 's/^[[:space:]]*//' | grep "^[3]\.[0-9]\.[0-9]*$" | tail -n 1)

if pyenv versions | grep $PYTHON_TWO_LATEST >> /dev/null
then
  echo "python $PYTHON_TWO_LATEST is already installed"
else
  echo "python $PYTHON_TWO_LATEST is not installed. Installing..."
  pyenv install $PYTHON_TWO_LATEST
  pyenv rehash
fi

if pyenv versions | grep $PYTHON_THREE_LATEST >> /dev/null
then
  echo "python $PYTHON_THREE_LATEST is already installed"
else
  echo "python $PYTHON_THREE_LATEST is not installed. Installing..."
  pyenv install $PYTHON_THREE_LATEST
  pyenv rehash
fi

pyenv global $PYTHON_THREE_LATEST

if command -v pip >> /dev/null
then
  echo "pip is already installed"
else
  echo "installing pip"
  easy_install pip
fi

if command -v aws >> /dev/null
then
  echo "aws cli is already installed"
else
  echo "aws cli is not installed. Installing..."
  pip install awscli --user
fi

## Go
if command -v go >> /dev/null
then
  echo "go is already installed"
else
  echo "go is not installed. Installing..."
  brew install go
fi

## Fonts
if [ -d "$git_fonts_dir/Menlo-for-Powerline" ]
then
  echo "Menlo-for-Powerline is already installed"
else
  echo "Menlo-for-Powerline is not installed. Installing..."
  git clone https://github.com/abertsch/Menlo-for-Powerline $git_fonts_dir/Menlo-for-Powerline
  cp $git_fonts_dir/Menlo-for-Powerline/*.ttf $mac_fonts_dir
fi

if [ -d "$git_fonts_dir/powerline" ]
then
  echo "SourceCodePro for Powerline font is already installed"
else
  echo "SourceCodePro for Powerline is not installed. Installing..."
  git clone https://github.com/powerline/fonts.git $git_fonts_dir/powerline
  cp $git_fonts_dir/powerline/SourceCodePro/*.otf $mac_fonts_dir
fi

##  Dotfiles
if [ -d "$dev_dir/dotfiles" ]
then
  echo "dot files repo is already installed"
else
  echo "Couldn't find dot files repo in $dev_dir/dotfiles. Cloning..."

  git clone https://github.com/iamatypeofwalrus/dotfiles.git

  cd $dev_dir/dotfiles
fi

echo "replacing existing dotfiles..."

for f in `ls -p $DIR/dotfiles | grep -v /`
do
  src=$DIR/dotfiles/$f
  dest=~/.$f

  if [ -f $dest ]; then
    rm $dest
  fi

  cp $src $dest
done 

# Special cases
cp $DIR/dotfiles/ssh/config ~/.ssh/config

## Git
echo "configuring gitignore global"
git config --global core.excludesfile ~/.gitignore_global
