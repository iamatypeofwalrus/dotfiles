#!/usr/bin/env sh

# Before this script is run you must:
# - Install Xcode and developer tools -> https://itunes.apple.com/us/app/xcode/id497799835?mt=12#
# - Install Docker tools              -> https://www.docker.com/docker-toolbox

# This script installs:
# - Atom
# - Brew
# - oh-my-zsh
# - Powerline Fonts
# - vundle
# - dotfiles
# -- vim-sublime .vimrc
# - Golang
#
# - Sets Preferences
# -- Maps Caps Lock to Control
# -- creates global git ignore

echo "Attempting to setup your new Mac..."

dev_dir=~/code
mkdir -p $dev_dir
mkdir -p ~/bin

# Install Atom
if [ "$(ls /Applications | grep Atom.app > /dev/null; echo $?)" = "1" ]; then
  echo "Atom is not installed. Installing..."

  atom_download=~/Downloads/atom.zip
  atom_download_app=~/Downloads/Atom.app
  curl -L https://atom.io/download/mac > $atom_download
  unzip $atom_download; rm $atom_download
  mv $atom_download_app /Applications

  # TODO: what about installing favorite packages?
fi

# Install Brew
if [ "$(which brew; echo $?)" = "1" ]; then
  echo "Brew is not installed. Installing..."

  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
fi

# Install oh-my-zsh
if [ "$(ls ~/.oh-my-zsh 2> /dev/null; echo $?)" = "1" ]; then
  echo "\noh my zsh not installed. Installing..."

  sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"
fi


# Set Preferences

## Git
git config --global core.excludesfile ~/.gitignore_global

## Map caps lock to control
keyboard_plist=~/Library/Preferences/ByHost/.GlobalPreferences*.plist

## Create key for the specific built in keyboard
key_output=`ioreg -n IOHIDKeyboard -r | grep -e 'class IOHIDKeyboard' -e VendorID\" -e Product`
keyboard_vendor_id=`echo  $key_output | awk -F\| '{print $3}' | awk -F = '{print $2}' | tr -d ' '`
keyboard_product_id=`echo $key_output | awk -F\| '{print $4}' | awk -F = '{print $2}' | tr -d ' '`

preference_key=com.apple.keyboard.modifiermapping.$keyboard_vendor_id-$keyboard_product_id-0
preference_value='<dict><key>HIDKeyboardModifierMappingDst</key><integer>2</integer><key>HIDKeyboardModifierMappingSrc</key><integer>0</integer></dict>'

if [ "$(defaults read ~/Library/Preferences/ByHost/.GlobalPreferences* $preference_key 2> /dev/null; echo $?)" = "1" ]; then
  echo "\nPreference not set to map Caps Lock to Control. Mapping..."

  # You can read it by: defaults read ~/Library/Preferences/ByHost/.GlobalPreferences* com.apple.keyboard.modifiermapping.1452-627-0
  # and remove it with: defaults -currentHost delete -g com.apple.keyboard.modifiermapping.1452-627-0
  defaults -currentHost write -g $preference_key -array-add $preference_value

  echo "\nNOTE: Log in and out for caps lock to map to control\n"
fi


# Install vundle for vim
if [ "$(ls ~/.vim/bundle/vundle 2> /dev/null; echo $?)" = "1" ]; then
  echo "\nVundle not found. Installing..."
  git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
fi

# Install Powerline
if [ "$(ls $dev_dir/fonts 2> /dev/null; echo $?)" = "1" ]; then
  echo "\nPowerline Fonts not found. Installing..."
  cd $dev_dir
  git clone https://github.com/powerline/fonts.git
  $dev_dir/fonts/install.sh

  # TODO find out what the hell I did to make the triangles line up properly
  echo "\nPowerline fonts were installed. You seem to like Source Code Pro for Powerline Medium 14pt"
fi

if [ "$(which go; echo $?)" = "1" ]; then
  echo "\nInstalling Golang"
  brew install golang
  mkdir -p $dev_dir/go
  mkdir -p $dev_dir/go/bin
  mkdir -p $dev_dir/go/pkg
  mkdir -p $dev_dir/go/src
fi

# Setup Dotfiles
# This should be the last step as it may require some files / programs to
# already be present
if [ "$(ls $dev_dir/dotfiles 2> /dev/null; echo $?)" = "1" ]; then
  echo "Couldn't find dot files repo in $dev_dir/dotfiles. Cloning..."

  git clone https://github.com/iamatypeofwalrus/dotfiles.git

  cd $dev_dir/dotfiles

  # installing oh my zsh adds its own version of .zshrc
  # running bootstrap will create a new one
  rm ~/.zshrc

  DOTFILE_ENV=goodreads ./bootstrap

  echo "\nThe usual ~/.vimrc is installed. You'll need to :BundleInstall"
fi

if [ "$(ls ~/.secrets)" = "1" ]; then
  echo "Creating ~/.secrets file. Don't for get to load it up!"
  touch ~/.secrets
fi

# Download section
# http://ethanschoonover.com/solarized
# TODO this should just be a standard profile that we download / install
## Solarized Dark
# curl https://raw.githubusercontent.com/altercation/solarized/master/osx-terminal.app-colors-solarized/Solarized%20Dark%20ansi.terminal > ~/Downloads/solarized-dark.terminal
